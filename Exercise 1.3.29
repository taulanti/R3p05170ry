package ex_1_3;

import java.util.Iterator;

import edu.princeton.cs.algs4.StdOut;


public class QueueCircularLinkedList<Item> implements Iterable<Item>{
	
	private Node last;
	private int N ;
	
	public int size(){
		return N;
	}
	
	public boolean isEmpty(){
		return N == 0;
	}
	
	public void enqueue(Item item){
		
		if(isEmpty()){
			last = new Node();
			last.item = item;
			last.next = last;
			N++;
		}else{
			Node n = new Node();
			Node oldLast = last;
			last = n;
			last.item = item;
			last.next = oldLast.next;
			oldLast.next = n;
			N++;
		}
	}
	
	public Item dequeue(){
		
		Item i;
		if(N == 1){
			i = last.next.item;
			last = null;
			
		}else{
			i = last.next.next.item;
			last.next = last.next.next;
		}
		N--;
		return i;
	}
	
	private class Node{
		
		Item item;
		Node next;
		
		public Item getItem(){
			return item;
		}
	}
	
	@Override
	public Iterator<Item> iterator() {
		// TODO Auto-generated method stub
		return new QueueIterator();
	}
	private class QueueIterator implements Iterator<Item>{
		
		private Node first = last.next.next;
		
		@Override
		public boolean hasNext() {
			// TODO Auto-generated method stub
			return N > 1;
		}

		@Override
		public Item next() {
			// TODO Auto-generated method stub
			N--;
			Item item = first.item;
			first = first.next;
			return item;
			
		}
		
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		QueueCircularLinkedList<String> queue = new QueueCircularLinkedList<String>();	
		queue.enqueue("1");
		queue.enqueue("2");
		queue.enqueue("3");
		StdOut.println("dequeued "+queue.dequeue());
		StdOut.println("dequeued "+queue.dequeue());
		StdOut.println("enqueue");
		queue.enqueue("4");
		
		Iterator<String> iterator = queue.iterator();
		while(iterator.hasNext()){
			String s = iterator.next();
			StdOut.println(s);
		}
		
	}

	

}
