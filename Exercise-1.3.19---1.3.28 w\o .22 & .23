package ex_1_3;

import java.beans.DefaultPersistenceDelegate;
import java.util.Iterator;
import edu.princeton.cs.algs4.StdOut;

public class LinkedList<Item>{
	
	private Node head;
	private int count;
	public LinkedList(){
		head = null;
		count = 0;
	}
	
	public int getCount(){
		return this.count;
	}
	
	public boolean isEmpty(){
		return head == null;
	}
	
	public void addNode(Item item){
		
		Node newNode = new Node(item);
		
		if(head == null){
			head = newNode;
			count++;
			return;
		}
		Node current = head;
		//StdOut.println(current.getItem());
		while(current.getNext() != null){
			current = current.getNext();
		}
		
		current.setNext(newNode);
		count++;
		
	}
	//1.3.19
	public void deleteLast(){
		
		Node current = head;
		Node previous = null;
		
		while(current.getNext() != null){
			previous = current;
			current = current.getNext();
		}
		
		previous.setNext(null);
		count--;
	}
	
	public Node getAtPos(int index){
		
		if(index <= 0)
			return null;
		
		Node current = head;
		
		for(int i = 1; i < index; i++)
		{
			if(current.getNext() == null)
				return null;
			
			current = current.getNext();
		}
		return current;
	}
	//1.3.20
	public void deleteAt(int pos){
		
		int counter = 1;
		Node current = head;
		Node previous = null;
		if( head == null){
			return;
		}
		while(counter < pos && current.getNext()!=null){
			counter++;
			previous = current;
			current = current.getNext();
		}
			
		if(counter == pos){
			if(current == head){
				StdOut.println("deleted head: "+head.getItem());
				head = head.getNext();
				count--;
			}else if(current.getNext() == null){
				StdOut.println("deleted: "+previous.getNext().getItem());
				previous.setNext(null);
				count--;
			}else if(current.getNext() != null){
				StdOut.println("deleted:"+current.getItem());
				previous.setNext(current.getNext());
				count--;
			}
		}else{
			StdOut.println("item doesnt exist");
		}
		
	}
	//1.3.21
	public boolean find(LinkedList l, String key){
		
		int counter = 1;
		if(!isEmpty()){
			while(counter <= l.getCount()){
				if(l.getAtPos(counter).getItem().equals(key)){
					return true;
				}
				counter++;
			}
		}
		return false;
	}
	//1.3.24
	public void removeAfter(Node n){
		
		if(n == null){StdOut.println("linkedlist node is null");}
		if(n.getItem() == null || n.getNext() == null){
			return;
		}else{
			n.next = n.next.next;
		}
	}
	//1.3.25
	public void insertAfter(Node first, Node second){
		
		if(first == null && second == null){return;}
		else if(first == null){first = second;}
		else if(second == null){return;}
		else{
			Node temp = first.getNext();
			first.setNext(second);
			second.setNext(temp);
		}
	}
	//1.3.26
	public void remove(LinkedList l, String key){
		
		int counter = 1;
		while(counter <= l.getCount()){
			StdOut.println("counter: "+counter+" l.getcount(): "+l.getCount());
			if(l.getAtPos(counter).getItem().equals(key)){
				l.deleteAt(counter);
			}else{
				StdOut.println("else");
				counter++;
			}
		}
		
	}
	//1.3.27
	public int max(Node first){
		
		first = head;
		
		if(first == null){
			return 0;
		}
		int max = Integer.parseInt((String) first.getItem());
		for(int i = 2; i <= getCount(); i++){
			if(Integer.parseInt((String) getAtPos(i).getItem()) > max){
				max = Integer.parseInt((String) getAtPos(i).getItem());
			}
		}
		return max;
	}
	//1.3.28 recursion max
	public int maxRecursion(Node n){
		
		if(n.getNext() == null){
			return Integer.parseInt((String) n.getItem());
		}
		int max = Integer.parseInt((String) n.getItem());
		if( max > maxRecursion(n.getNext())){
			return max;
		}else{
			return max = maxRecursion(n.getNext());
		}
			
	}
	
	public Node reverse(Node x){
		
		Node first = x;
		Node reverse = null;
		while(first != null){
			Node second = first.next;
			first.next = reverse;
			reverse = first;
			first = second;
		}
		return reverse;
		
	}
	
	public String toString()
	{
		Node current = head.getNext();
		String output = "";
		while(current != null)
		{
			output += "[" + current.getItem().toString() + "]";
			current = current.getNext();
		}
		return output;
	}
	
	
	private class Node<Item>{
		
		private Node next;
		private Item item;
		
		public Node(Item item){
			this.item = item;
			this.next = null;
		}
		
		public Node(Item item, Node next){
			this.item = item;
			this.next = next;
		}
		
		
		public Node getNext(){
			return next;
		}
		
		public void setNext(Node n){
			next = n;
		}
		
		public void setItem(Item item){
			this.item = item;
		}
		
		public Item getItem(){
			return item;
		}
				
		public String toString(){
			return getItem()+" -> "+getNext();
		}
		
	}
	
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		LinkedList<String> list = new LinkedList<String>();
		list.addNode("1");
		list.addNode("2");
		list.addNode("3");
		list.addNode("4");
		//list.insertAfter(list.getAtPos(1), list.getAtPos(4));
		//StdOut.println(list.get(2).getItem());
		//list.removeAfter(list.getAtPos(1));
		//list.deleteAt(3);
		//list.remove(list, "4");
		//StdOut.println(list.getAtPos(1));
		StdOut.println(list.reverse(list.getAtPos(1)));
		
		
	}

}
